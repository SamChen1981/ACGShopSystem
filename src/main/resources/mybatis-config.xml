<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <!--<properties resource="jdbc.properties"/>-->

    <!-- 设置信息元素  会修改MyBatis在运行时的行为方式 -->
    <settings>
        <!--
        二级缓存的局限性
        mybatis二级缓存对细粒度的数据级别的缓存实现不好，
        比如如下需求：对商品信息进行缓存，由于商品信息查询访问量大，但是要求用户每次都能查询最新的商品信息，
        此时如果使用mybatis的二级缓存就无法实现当一个商品变化时只刷新该商品的缓存信息而不刷新其它商品的信息，
        因为mybaits的二级缓存区域以mapper为单位划分，当一个商品信息变化会将所有商品信息的缓存数据全部清空。
        解决此类问题需要在业务层根据需求对数据有针对性缓存。所以在项目实际应用中，一般会整合专门的缓存框架实现缓存处理。
        -->
        <!-- 全局映射器启用缓存 二级缓存 调试的时候关闭  -->
        <setting name="cacheEnabled" value="false"/>
        <!-- 查询时，关闭关联对象及时加载以提高性能 -->
        <setting name="lazyLoadingEnabled" value="true"/>
        <!-- 当设置为‘true’的时候，延迟加载的对象可能被任何延迟属性全部加载。否则，每个属性都按需加载 -->
        <setting name="aggressiveLazyLoading" value="false"/>
        <!-- 对于未知的SQL查询，允许返回不同的结果集以达到通用的效果 -->
        <setting name="multipleResultSetsEnabled" value="true"/>
        <!-- 允许使用列标签代替列名 -->
        <setting name="useColumnLabel" value="true"/>
        <!-- 允许使用自定义的主键值(比如由程序生成的UUID 32位编码作为键值)，数据表的PK生成策略将被覆盖 -->
        <setting name="useGeneratedKeys" value="true"/>
        <!-- 给予被嵌套的resultMap以字段-属性的映射支持 下划线转换成大小写 -->
        <setting name="autoMappingBehavior" value="FULL"/>
        <!-- 对于批量更新操作缓存SQL以提高性能
          配置默认的执行器。
          SIMPLE 就是普通的执行器；
          REUSE 执行器会重用预处理语句（prepared statements）；
          BATCH 执行器将重用语句并执行批量更新。-->
        <setting name="defaultExecutorType" value="REUSE"/>
        <!-- 数据库超过25000秒仍未响应则超时 -->
        <setting name="defaultStatementTimeout" value="10000"/>
    </settings>

     <!--在mapper的resultType就不用写包名 -->
    <typeAliases>
        <package name="com.acg_shop.entity"/>
    </typeAliases>

    <!--
        <environments default="development">
            <environment id="development">
                <transactionManager type="JDBC"/>
                <dataSource type="POOLED">
                    <property name="driver" value="${driver}"/>
                    <property name="url" value="${url}"/>
                    <property name="username" value="${username}"/>
                    <property name="password" value="${password}"/>
                </dataSource>
            </environment>
        </environments>

        <mappers>
            <mapper resource="mapper/Text_Mapper.xml"/>
            <mapper resource="mapper/User_Info_Mapper.xml"/>
            <mapper resource="mapper/Text_Mapper.xml"/>
        </mappers>
        -->

</configuration>